{"version":3,"sources":["logo.svg","components/Forminput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["Forminput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","cmToMeter","bmi","Math","pow","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLocaleLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2bf13fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Forminput = props => {\r\n    const {\r\n        name,\r\n        type, \r\n        title,\r\n        value,\r\n        onChange\r\n    } = props;\r\n    return (\r\n        <div className=\"input-groups\">\r\n            <span className=\"label\">{title}</span>\r\n            <div className=\"range-container\">\r\n                <input\r\n                    type={type}\r\n                    name={name}\r\n                    className=\"range-input\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    autoComplete=\"false\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nForminput.propTypes = {\r\n    title: PropTypes.string,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    type: PropTypes.oneOf(['text'])\r\n}\r\n\r\nexport default Forminput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Forminput from './Forminput'\r\n\r\nconst BmiCalculator = props => {\r\n    const {getBmiValue} = props;\r\n\r\n    const [heightUnit, setHeightUnit] = useState('cm');\r\n    const [weightUnit, setWeightUnit] = useState('kg');\r\n    const [unit, setUnit] = useState('Metric');\r\n    const [count, setCount] = useState({\r\n        heightCount: '0',\r\n        inchesCount: '0',\r\n        weightCount: '0'\r\n    });\r\n\r\n    const {heightCount, inchesCount, weightCount} = count;\r\n\r\n    useEffect(() => {\r\n        metricBMI(heightCount, weightCount);\r\n        imperialBMI(heightCount, weightCount, inchesCount)\r\n\r\n        // eslint-disable-next-line\r\n    }, [heightCount, weightCount, inchesCount]);\r\n\r\n    const onChangeInput = e => {\r\n        const {name, value} = e.target;\r\n        setCount(prevState => ({...prevState, [name]: value}));\r\n    }\r\n\r\n    const onSelectTag = e => {\r\n        setUnit(e.target.value);\r\n        if(e.target.value === 'Metric'){\r\n            setHeightUnit('cm');\r\n            setWeightUnit('kg');\r\n        }else{\r\n            setHeightUnit('ft');\r\n            setWeightUnit('lbs');\r\n        }\r\n    }\r\n\r\n    const metricBMI = (height, weight) => {\r\n        if(height > 0 && weight > 0){\r\n            const cmToMeter = height / 100;\r\n            const bmi = weight / (Math.pow(cmToMeter,2));\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    }\r\n\r\n    const imperialBMI = (height, weight, inches) => {\r\n        if(height > 0 && weight > 0 && inches > 0){\r\n            const heightToInches = (height * 12) + parseInt(inches);\r\n            const bmi = 703 * (weight / (Math.pow(heightToInches,2)));\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    }\r\n\r\n\r\n    const resetData = e => {\r\n        e.preventDefault();\r\n\r\n        getBmiValue(0);\r\n        setUnit('Metric');\r\n        setCount({\r\n            heightCount: '0',\r\n            inchesCount: '0',\r\n            weightCount: '0'\r\n        });\r\n        setWeightUnit('cm');\r\n        setHeightUnit('kg');\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <div className=\"bmi-inputs\">\r\n              <div className=\"inputs-fields\">\r\n                  <div>\r\n                      <span className=\"label-unit\">Unit</span>\r\n                      <div className=\"unit\">\r\n                          <select\r\n                              name=\"unit\"\r\n                              value={unit}\r\n                              onChange={onSelectTag}\r\n                              className=\"form-control form-control-sm\"\r\n                          >\r\n                              <option value=\"Metric\">Metric</option>\r\n                              <option value=\"Imperial\">Imperial</option>\r\n                          </select>\r\n                      </div>\r\n                  </div>\r\n                  <Forminput\r\n                    type=\"text\"\r\n                    name=\"heightCount\"\r\n                    title={`Height (${heightUnit})`}\r\n                    value={heightCount}\r\n                    onChange={onChangeInput}\r\n                  />\r\n                  {\r\n                      unit === 'Imperial' ? \r\n                      <Forminput\r\n                        type=\"text\"\r\n                        name=\"inchesCount\"\r\n                        title={`(in)`}\r\n                        value={inchesCount}\r\n                        onChange={onChangeInput}\r\n                      />\r\n                      : ''\r\n                  }\r\n                  <Forminput\r\n                    type=\"text\"\r\n                    name=\"weightCount\"\r\n                    title={`Weight (${weightUnit})`}\r\n                    value={weightCount}\r\n                    onChange={onChangeInput}\r\n                  />\r\n              </div>\r\n              <button className=\"button\" type=\"submit\" onClick={resetData}>\r\n                  Reset\r\n              </button>\r\n          </div>  \r\n        </>\r\n    )\r\n}\r\n\r\nBmiCalculator.propTypes = {\r\n    getBmiValue: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BmiCalculator\r\n","import React, {useState} from 'react'\r\nimport BmiCalculator from './BmiCalculator'\r\n\r\nexport const BMI = () => {\r\n    const [bmiValue, setBmiValue] = useState(0);\r\n\r\n    const getBmiClass = bmi => {\r\n        if (bmi >= 1 && bmi <= 18.5) return 'Underweight';\r\n        if (bmi > 18.5 && bmi <= 24.9) return 'Normal weight';\r\n        if (bmi > 24.9 && bmi <= 29.9) return 'Overweight';\r\n        if (bmi >= 30) return 'Overweight';\r\n    }\r\n\r\n    const bmiBackgroundColor = bmi => {\r\n        if (bmi >= 1 && bmi <= 18.5) return '#FED88B';\r\n        if (bmi > 18.5 && bmi <= 24.9) return '#80ff80';\r\n        if (bmi > 24.9 && bmi <= 29.9) return '#FF7F50';\r\n        if (bmi >= 30) return '#FF5411';\r\n    }\r\n\r\n    const bmiCategory = getBmiClass(bmiValue);\r\n    let bmiClass = '';\r\n    if(bmiValue > 0 && bmiCategory){\r\n        bmiClass = bmiCategory.split(' ')[0].toLocaleLowerCase();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"calculator\"\r\n                style={{backgroundColor: bmiBackgroundColor(bmiValue)}}\r\n            >\r\n                <h3>Body mass index calculator</h3>\r\n                <div className=\"bmi-result-container\">\r\n                    <div className=\"bmi-result\">\r\n                        <div className=\"bmi-result-number\">\r\n                            Body Mass Index (BMI) = {bmiValue}\r\n                        </div>\r\n                        <div className={`bmi-category ${bmiClass}`}>\r\n                            {bmiCategory}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <BmiCalculator getBmiValue={setBmiValue} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BMI;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport BMI from './components/BMI';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}